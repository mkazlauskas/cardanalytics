{"version":3,"sources":["app/actions.ts","app/epics/index.ts","app/epics/updateData/index.ts","app/epics/removePreloader/index.ts","app/reducers/index.ts","app/reducers/cardanoData/index.ts","app/services/load/index.ts","app/services/index.ts","app/store.ts"],"names":["loadCardanoData","createAction","_$","__$","services","timer","pipe","exhaustMap","load$","map","data","catchError","e","warn","EMPTY","action$","combineLatest","filter","isActionOf","take","tap","document","getElementById","remove","mergeMap","rootReducer","combineReducers","cardanoData","state","action","type","getType","payload","client","GraphQLClient","process","load","request","then","assets_aggregate","tip","cardano","transactions_aggregate","assets","parseInt","aggregate","count","blocks","number","epoch","epochNo","slot","slotNo","transactions","from","this","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","epicMiddleware","createEpicMiddleware","dependencies","middleware","applyMiddleware","store","createStore","run","combineEpics","epics"],"mappings":"uNAGaA,EAAkBC,uBAAa,oBAAbA,G,2CCAhB,GCM+B,SAACC,EAAIC,EAAKC,GAAV,OAC5CC,YAAM,EALsB,KAKHC,KAAKC,aAAW,kBACvCH,EAASI,QAAQF,KACfG,aAAI,SAACC,GAAD,OAAUV,EAAgBU,MAC9BC,aAAW,SAACC,GAGV,OAFAC,eAAK,qCAAD,OATkB,IASlB,MAA0DD,GAEvDE,aCVoC,SAACC,GAAD,OAAaC,YAAc,CAC5ED,EAAQT,KAAKW,YAAOC,qBAAWlB,OAC9BM,KACDa,YAAK,GACLC,aAAI,kCAAMC,SAASC,eAAe,oBAA9B,aAAM,EAAsCC,YAChDC,aAAS,kBAAMV,UCPJW,EAAcC,YAAgB,CAAEC,YCA9B,WAAwD,IAAvDC,EAAsD,uDAAzB,KAAMC,EAAmB,uCACpE,OAAIA,EAAOC,OAASC,kBAAQ/B,GACnB6B,EAAOG,QAETJ,K,gBCSHK,EAAS,IAAIC,gBAAcC,uCCfpB/B,EDiBE,CAEbgC,KAFa,WAGX,OAAOH,EAAOI,QAAP,gmDAA0CC,MAC/C,gBAAGC,EAAH,EAAGA,iBAA6BC,EAAhC,EAAqBC,QAAWD,IAAOE,EAAvC,EAAuCA,uBAAvC,MAAoF,CAClFC,OAAQC,SAASL,EAAiBM,UAAUC,OAC5CC,OAAQP,EAAIQ,QAAU,EACtBC,MAAOT,EAAIU,SAAW,EACtBC,KAAMX,EAAIY,QAAU,EACpBC,aAAcT,SAASF,EAAuBG,UAAUC,YAK9DtC,MAda,WAeX,OAAO8C,YAAKC,KAAKnB,UExBfoB,EAC4C,qBAAzCC,qCAAuDA,qCAAuCC,IAGjGC,EAAiBC,YAAsD,CAAEC,aAAczD,IACvF0D,EAAaN,EAAiBO,YAAgBJ,IAE9CK,EAAQC,YAAYxC,EAAaqC,GAEvCH,EAAeO,IAAIC,IAAY,WAAZ,cAAgBC,KAEpBJ","file":"static/js/7.5212970f.chunk.js","sourcesContent":["import { ActionType, createAction } from 'typesafe-actions';\nimport { CardanoStats } from './types';\n\nexport const loadCardanoData = createAction('LOAD_CARDANO_DATA')<CardanoStats>();\n\nexport const actions = { loadCardanoData };\nexport type Action = ActionType<typeof actions>;","import { removePreloader$ } from './removePreloader';\nimport { updateData$ } from './updateData';\n\nexport default [updateData$, removePreloader$];","import { warn } from 'loglevel';\nimport { catchError, EMPTY, exhaustMap, map, timer } from 'rxjs';\nimport { loadCardanoData } from '../../actions';\nimport { CardanalyticsEpic } from '../types';\n\nexport const FETCH_INTERVAL = 10000;\n\n// Load data on page load and every FETCH_INTERVAL ms.\n// Throttle requests if server is too slow to respond.\nexport const updateData$: CardanalyticsEpic = (_$, __$, services) => \n  timer(0, FETCH_INTERVAL).pipe(exhaustMap(() =>\n    services.load$().pipe(\n      map((data) => loadCardanoData(data)),\n      catchError((e) => {\n        warn(`Failed to fetch data, retrying in ${FETCH_INTERVAL}ms`, e);\n        // Ignore the errors. Will retry in FETCH_INTERVAL.\n        return EMPTY;\n      }),\n    )\n  ));\n\n","import { combineLatest, EMPTY, filter, mergeMap, take, tap } from 'rxjs';\nimport { isActionOf } from 'typesafe-actions';\nimport { CardanalyticsEpic } from '../types';\nimport { loadCardanoData } from '../../actions';\n\n// Remove preloader animation when cardano data is first loaded. \nexport const removePreloader$: CardanalyticsEpic = (action$) => combineLatest([\n  action$.pipe(filter(isActionOf(loadCardanoData)))\n]).pipe(\n  take(1),\n  tap(() => document.getElementById('preloader')?.remove()),\n  mergeMap(() => EMPTY)\n);","import { combineReducers } from 'redux';\nimport { StateType } from 'typesafe-actions';\nimport cardanoData from './cardanoData';\n\nexport const rootReducer = combineReducers({ cardanoData });\n\nexport type State = StateType<typeof rootReducer>;","import { getType } from 'typesafe-actions';\nimport { Action, loadCardanoData } from '../../actions';\nimport { CardanoStats } from '../../types';\n\nexport default (state: CardanoStats | null = null, action: Action) => {\n  if (action.type === getType(loadCardanoData)) {\n    return action.payload;\n  }\n  return state;\n};","import { loader } from 'graphql.macro';\nimport { GraphQLClient } from 'graphql-request';\nimport { Asset_Aggregate_Fields, Block, Transaction_Aggregate_Fields } from '@cardano-graphql/client-ts';\nimport { from } from 'rxjs';\nimport { CardanoStats } from '../../types';\n\n// TODO: would be great to generate this type from schema.graphql+query.graphql\ninterface QueryResponse {\n  transactions_aggregate: {\n    aggregate: Pick<Transaction_Aggregate_Fields, 'count'>\n  };\n  cardano: {tip: Required<Pick<Block, 'epochNo'|'number'|'slotNo'>>};\n  assets_aggregate: {\n    aggregate: Pick<Asset_Aggregate_Fields, 'count'>;\n  }\n}\n\nconst client = new GraphQLClient(process.env.GRAPHQL_URL);\n\nexport default {\n  // Query cardano data via GraphQL and remap the response to CardanoStats\n  load() {\n    return client.request(loader('./query.graphql')).then(\n      ({ assets_aggregate, cardano: { tip }, transactions_aggregate }: QueryResponse) => ({\n        assets: parseInt(assets_aggregate.aggregate.count),\n        blocks: tip.number || 0,\n        epoch: tip.epochNo || 0,\n        slot: tip.slotNo || 0,\n        transactions: parseInt(transactions_aggregate.aggregate.count),\n      } as CardanoStats)\n    );\n  },\n  // Same as load(), but returns an Observable\n  load$() {\n    return from(this.load());\n  }\n};","import load from './load';\n\nexport const services = load;\nexport type Services = typeof services;","import { applyMiddleware, compose, createStore } from 'redux';\nimport { combineEpics, createEpicMiddleware } from 'redux-observable';\nimport { Action } from './actions';\nimport epics from './epics';\nimport { rootReducer, State } from './reducers';\nimport { services, Services } from './services';\n\n// Setup for Redux DevTools extension\n// eslint-disable-next-line @typescript-eslint/naming-convention\ndeclare let __REDUX_DEVTOOLS_EXTENSION_COMPOSE__: <R>(a: R) => R;\nconst composeEnhancers =\n  typeof __REDUX_DEVTOOLS_EXTENSION_COMPOSE__ !== 'undefined' ? __REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : compose;\n\n// Setup redux-observable middleware\nconst epicMiddleware = createEpicMiddleware<Action, Action, State, Services>({ dependencies: services });\nconst middleware = composeEnhancers(applyMiddleware(epicMiddleware));\n\nconst store = createStore(rootReducer, middleware);\n\nepicMiddleware.run(combineEpics(...epics));\n\nexport default store;\n"],"sourceRoot":""}