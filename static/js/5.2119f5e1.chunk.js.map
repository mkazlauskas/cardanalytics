{"version":3,"sources":["components/index.tsx","components/GeneralInfo/index.tsx","app/actions.ts","app/epics/index.ts","app/epics/updateData/index.ts","app/epics/removePreloader/index.ts","app/reducers/index.ts","app/reducers/cardanoData/index.ts","app/services/load/index.ts","app/services/index.ts","app/store.ts","app/index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","container","backgroundColor","palette","background","default","card","margin","spacing","cards","title","Component","data","useSelector","cardanoData","Grid","direction","epoch","toLocaleString","blocks","slot","transactions","assets","Layout","classes","className","map","Card","key","CardHeader","CardContent","loadCardanoData","createAction","_$","__$","services","timer","pipe","exhaustMap","load$","catchError","e","warn","EMPTY","action$","combineLatest","filter","isActionOf","take","tap","document","getElementById","remove","mergeMap","rootReducer","combineReducers","state","action","type","getType","payload","loadClient","then","GraphQLClient","process","load","client","request","assets_aggregate","tip","cardano","transactions_aggregate","parseInt","aggregate","count","number","epochNo","slotNo","from","this","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","epicMiddleware","createEpicMiddleware","dependencies","middleware","applyMiddleware","store","createStore","run","combineEpics","epics","setLevel","levels","INFO","createTheme","grey","app","CssBaseline","ReactDOM","render"],"mappings":"iQAIA,IAAMA,EAAYC,aAAW,SAACC,GAAD,OAAkBC,YAAa,CAC1DC,UAAW,CAAEC,gBAAiBH,EAAMI,QAAQC,WAAWC,SACvDC,KAAM,CAAEC,OAAQR,EAAMS,gBAGlBC,EAAQ,CAAC,CAAEC,MAAO,uBAAwBC,UCHjC,WACb,IAAMC,EAAOC,aAAY,qBAAGC,eAC5B,OAAKF,EAEH,kBAACG,EAAA,EAAD,CAAMd,WAAS,EAACe,UAAU,UACxB,uCAEG,IACAJ,EAAKK,MAAMC,kBAEd,uCAEG,IACAN,EAAKO,OAAOD,kBAEf,sCAEG,IACAN,EAAKQ,KAAKF,kBAEb,oDAEG,IACAN,EAAKS,aAAaH,kBAErB,8CAEG,IACAN,EAAKU,OAAOJ,mBA1BD,QDoBLK,MAhBf,WACE,IAAMC,EAAU3B,IAChB,OACE,kBAACkB,EAAA,EAAD,CAAMU,UAAWD,EAAQvB,UAAWA,WAAS,GAC1CQ,EAAMiB,KAAI,gBAAGhB,EAAH,EAAGA,MAAOC,EAAV,EAAUA,UAAV,OACT,kBAACgB,EAAA,EAAD,CAAMF,UAAWD,EAAQlB,KAAMsB,IAAKlB,GAClC,kBAACmB,EAAA,EAAD,CAAYnB,MAAOA,IACnB,kBAACoB,EAAA,EAAD,KACE,kBAACnB,EAAD,a,8FEjBCoB,EAAkBC,uBAAa,oBAAbA,G,mCCAhB,GCM+B,SAACC,EAAIC,EAAKC,GAAV,OAC5CC,YAAM,EALsB,KAKHC,KAAKC,aAAW,kBACvCH,EAASI,QAAQF,KACfX,aAAI,SAACd,GAAD,OAAUmB,EAAgBnB,MAC9B4B,aAAW,SAACC,GAGV,OAFAC,eAAK,qCAAD,OATkB,IASlB,MAA0DD,GAEvDE,aCVoC,SAACC,GAAD,OAAaC,YAAc,CAC5ED,EAAQP,KAAKS,YAAOC,qBAAWhB,OAC9BM,KACDW,YAAK,GACLC,aAAI,kCAAMC,SAASC,eAAe,oBAA9B,aAAM,EAAsCC,YAChDC,aAAS,kBAAMV,UCPJW,EAAcC,YAAgB,CAAEzC,YCA9B,WAAwD,IAAvD0C,EAAsD,uDAAzB,KAAMC,EAAmB,uCACpE,OAAIA,EAAOC,OAASC,kBAAQ5B,GACnB0B,EAAOG,QAETJ,K,QCYHK,EADF,kCAC6BC,MAAK,mBAAuB,IAAIC,EAA3B,EAAGA,eAAsCC,0CClBlE7B,EDoBE,CAEb8B,KAFa,WAGX,OAAOJ,EAAWC,MAAK,SAAAI,GAAM,OAAIA,EAAOC,QAAP,gmDAA0CL,MACzE,gBAAGM,EAAH,EAAGA,iBAA6BC,EAAhC,EAAqBC,QAAWD,IAAOE,EAAvC,EAAuCA,uBAAvC,MAAoF,CAClFjD,OAAQkD,SAASJ,EAAiBK,UAAUC,OAC5CvD,OAAQkD,EAAIM,QAAU,EACtB1D,MAAOoD,EAAIO,SAAW,EACtBxD,KAAMiD,EAAIQ,QAAU,EACpBxD,aAAcmD,SAASD,EAAuBE,UAAUC,eAK9DnC,MAda,WAeX,OAAOuC,YAAKC,KAAKd,UE3Bfe,EAC4C,qBAAzCC,qCAAuDA,qCAAuCC,IAGjGC,EAAiBC,YAAsD,CAAEC,aAAclD,IACvFmD,EAAaN,EAAiBO,YAAgBJ,IAE9CK,EAAQC,YAAYnC,EAAagC,GAEvCH,EAAeO,IAAIC,IAAY,WAAZ,cAAgBC,KAEpBJ,QCXfK,mBAAiDC,SAAOC,MAExD,IAAMhG,EAAQiG,YAAY,CAAE7F,QAAQ,CAAEC,WAAY,CAAEC,QAAS4F,IAAK,SAG5DC,EACJ,kBAAC,IAAD,CAAUV,MAAOA,GACf,kBAAC,IAAD,CAAkBzF,MAAOA,GACvB,kBAACoG,EAAA,EAAD,MACA,kBAAC,EAAD,QAKNC,IAASC,OAAOH,EAAKhD,SAASC,eAAe","file":"static/js/5.2119f5e1.chunk.js","sourcesContent":["import { Card, CardContent, CardHeader, createStyles, Grid, makeStyles, Theme } from '@material-ui/core';\nimport React from 'react';\nimport GeneralInfo from './GeneralInfo';\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n  container: { backgroundColor: theme.palette.background.default },\n  card: { margin: theme.spacing() }\n}));\n\nconst cards = [{ title: 'General Cardano Info', Component: GeneralInfo }];\n\n// Root layout component\nfunction Layout() {\n  const classes = useStyles();\n  return (\n    <Grid className={classes.container} container>\n      {cards.map(({ title, Component }) => (\n        <Card className={classes.card} key={title}>\n          <CardHeader title={title} />\n          <CardContent>\n            <Component />\n          </CardContent>\n        </Card>\n      ))}\n    </Grid>\n  );\n}\n\nexport default Layout;\n","import { Grid } from '@material-ui/core';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { State } from '../../app/reducers';\n\n// Render general Cardano blockchain information\nexport default function GeneralInfo() {\n  const data = useSelector(({ cardanoData }: State) => cardanoData);\n  if (!data) return null;\n  return (\n    <Grid container direction=\"column\">\n      <span>\n        Epoch:\n        {' '}\n        {data.epoch.toLocaleString()}\n      </span>\n      <span>\n        Block:\n        {' '}\n        {data.blocks.toLocaleString()}\n      </span> \n      <span>\n        Slot:\n        {' '}\n        {data.slot.toLocaleString()}\n      </span>\n      <span>\n        Total transactions:\n        {' '}\n        {data.transactions.toLocaleString()}\n      </span>\n      <span>\n        Total assets:\n        {' '}\n        {data.assets.toLocaleString()}\n      </span> \n    </Grid>\n  );\n}","import { ActionType, createAction } from 'typesafe-actions';\nimport { CardanoStats } from './types';\n\nexport const loadCardanoData = createAction('LOAD_CARDANO_DATA')<CardanoStats>();\n\nexport const actions = { loadCardanoData };\nexport type Action = ActionType<typeof actions>;","import { removePreloader$ } from './removePreloader';\nimport { updateData$ } from './updateData';\n\nexport default [updateData$, removePreloader$];","import { warn } from 'loglevel';\nimport { catchError, EMPTY, exhaustMap, map, timer } from 'rxjs';\nimport { loadCardanoData } from '../../actions';\nimport { CardanalyticsEpic } from '../types';\n\nexport const FETCH_INTERVAL = 10000;\n\n// Load data on page load and every FETCH_INTERVAL ms.\n// Throttle requests if server is too slow to respond.\nexport const updateData$: CardanalyticsEpic = (_$, __$, services) => \n  timer(0, FETCH_INTERVAL).pipe(exhaustMap(() =>\n    services.load$().pipe(\n      map((data) => loadCardanoData(data)),\n      catchError((e) => {\n        warn(`Failed to fetch data, retrying in ${FETCH_INTERVAL}ms`, e);\n        // Ignore the errors. Will retry in FETCH_INTERVAL.\n        return EMPTY;\n      }),\n    )\n  ));\n\n","import { combineLatest, EMPTY, filter, mergeMap, take, tap } from 'rxjs';\nimport { isActionOf } from 'typesafe-actions';\nimport { CardanalyticsEpic } from '../types';\nimport { loadCardanoData } from '../../actions';\n\n// Remove preloader animation when cardano data is first loaded. \nexport const removePreloader$: CardanalyticsEpic = (action$) => combineLatest([\n  action$.pipe(filter(isActionOf(loadCardanoData)))\n]).pipe(\n  take(1),\n  tap(() => document.getElementById('preloader')?.remove()),\n  mergeMap(() => EMPTY)\n);","import { combineReducers } from 'redux';\nimport { StateType } from 'typesafe-actions';\nimport cardanoData from './cardanoData';\n\nexport const rootReducer = combineReducers({ cardanoData });\n\nexport type State = StateType<typeof rootReducer>;","import { getType } from 'typesafe-actions';\nimport { Action, loadCardanoData } from '../../actions';\nimport { CardanoStats } from '../../types';\n\nexport default (state: CardanoStats | null = null, action: Action) => {\n  if (action.type === getType(loadCardanoData)) {\n    return action.payload;\n  }\n  return state;\n};","import { loader } from 'graphql.macro';\nimport { Asset_Aggregate_Fields, Block, Transaction_Aggregate_Fields } from '@cardano-graphql/client-ts';\nimport { from } from 'rxjs';\nimport { CardanoStats } from '../../types';\n\n// TODO: would be great to generate this type from schema.graphql+query.graphql\ninterface QueryResponse {\n  transactions_aggregate: {\n    aggregate: Pick<Transaction_Aggregate_Fields, 'count'>\n  };\n  cardano: {tip: Required<Pick<Block, 'epochNo'|'number'|'slotNo'>>};\n  assets_aggregate: {\n    aggregate: Pick<Asset_Aggregate_Fields, 'count'>;\n  }\n}\n\n// Use mock client for tests\nconst loadClientLib = process.env.TEST_BUILD\n  ?\timport('./graphql-request.mock')\n  : import('graphql-request');\nconst loadClient = loadClientLib.then(({ GraphQLClient }) => new GraphQLClient(process.env.GRAPHQL_URL));\n\nexport default {\n  // Query cardano data via GraphQL and remap the response to CardanoStats\n  load() {\n    return loadClient.then(client => client.request(loader('./query.graphql')).then(\n      ({ assets_aggregate, cardano: { tip }, transactions_aggregate }: QueryResponse) => ({\n        assets: parseInt(assets_aggregate.aggregate.count),\n        blocks: tip.number || 0,\n        epoch: tip.epochNo || 0,\n        slot: tip.slotNo || 0,\n        transactions: parseInt(transactions_aggregate.aggregate.count),\n      } as CardanoStats)\n    ));\n  },\n  // Same as load(), but returns an Observable\n  load$() {\n    return from(this.load());\n  }\n};","import load from './load';\n\nexport const services = load;\nexport type Services = typeof services;","import { applyMiddleware, compose, createStore } from 'redux';\nimport { combineEpics, createEpicMiddleware } from 'redux-observable';\nimport { Action } from './actions';\nimport epics from './epics';\nimport { rootReducer, State } from './reducers';\nimport { services, Services } from './services';\n\n// Setup for Redux DevTools extension\n// eslint-disable-next-line @typescript-eslint/naming-convention\ndeclare let __REDUX_DEVTOOLS_EXTENSION_COMPOSE__: <R>(a: R) => R;\nconst composeEnhancers =\n  typeof __REDUX_DEVTOOLS_EXTENSION_COMPOSE__ !== 'undefined' ? __REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : compose;\n\n// Setup redux-observable middleware\nconst epicMiddleware = createEpicMiddleware<Action, Action, State, Services>({ dependencies: services });\nconst middleware = composeEnhancers(applyMiddleware(epicMiddleware));\n\nconst store = createStore(rootReducer, middleware);\n\nepicMiddleware.run(combineEpics(...epics));\n\nexport default store;\n","\nimport { createTheme, CssBaseline, MuiThemeProvider } from '@material-ui/core';\nimport { grey } from '@material-ui/core/colors';\nimport { levels, setLevel } from 'loglevel';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport Components from '../components';\nimport store from './store';\n\nsetLevel(process.env.NODE_ENV === 'production' ? levels.INFO : levels.DEBUG);\n\nconst theme = createTheme({ palette:{ background: { default: grey[200] } } });\n\n// Setup React context providers, add CssBaseline, render our app components\nconst app = (\n  <Provider store={store}>\n    <MuiThemeProvider theme={theme}>\n      <CssBaseline />\n      <Components />\n    </MuiThemeProvider>\n  </Provider>\n);\n\nReactDOM.render(app, document.getElementById('root'));"],"sourceRoot":""}